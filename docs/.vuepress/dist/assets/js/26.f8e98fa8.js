(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{214:function(t,v,_){"use strict";_.r(v);var a=_(0),r=Object(a.a)({},function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"正则表达式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式","aria-hidden":"true"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("正则表达式"),_("OutboundLink")],1)]),t._v(" "),_("hr"),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("元字符")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v(".")]),t._v(" "),_("td",[t._v("句号匹配任意单个字符除了换行符.")])]),t._v(" "),_("tr",[_("td",[t._v("[ ]")]),t._v(" "),_("td",[t._v("字符种类. 匹配方括号内的任意字符.")])]),t._v(" "),_("tr",[_("td",[t._v("[^]")]),t._v(" "),_("td",[t._v("否定的字符种类. 匹配除了方括号里的任意字符")])]),t._v(" "),_("tr",[_("td",[t._v("*")]),t._v(" "),_("td",[t._v("匹配>=0个重复的在*号之前的字符.")])]),t._v(" "),_("tr",[_("td",[t._v("+")]),t._v(" "),_("td",[t._v("匹配>=1个重复的+号前的字符.")])]),t._v(" "),_("tr",[_("td",[t._v("?")]),t._v(" "),_("td",[t._v("标记?之前的字符为可选.")])]),t._v(" "),_("tr",[_("td",[t._v("{n,m}")]),t._v(" "),_("td",[t._v("匹配num个大括号之前的字符 (n <= num <= m).")])]),t._v(" "),_("tr",[_("td",[t._v("(xyz)")]),t._v(" "),_("td",[t._v("字符集, 匹配与 xyz 完全相等的字符串.")])]),t._v(" "),_("tr",[_("td",[t._v("|")]),t._v(" "),_("td",[t._v("或运算符,匹配符号前或后的字符.")])]),t._v(" "),_("tr",[_("td",[t._v("\\")]),t._v(" "),_("td",[t._v("转义字符,用于匹配一些保留的字符 "),_("code",[t._v("[ ] ( ) { } . * + ? ^ $ \\ |")])])]),t._v(" "),_("tr",[_("td",[t._v("^")]),t._v(" "),_("td",[t._v("从开始行开始匹配.")])]),t._v(" "),_("tr",[_("td",[t._v("$")]),t._v(" "),_("td",[t._v("从末端开始匹配.")])])])]),t._v(" "),_("p",[t._v("​")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("简写")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v(".")]),t._v(" "),_("td",[t._v("除换行符外的所有字符")])]),t._v(" "),_("tr",[_("td",[t._v("\\w")]),t._v(" "),_("td",[t._v("匹配所有字母数字, 等同于 "),_("code",[t._v("[a-zA-Z0-9_]")])])]),t._v(" "),_("tr",[_("td",[t._v("\\W")]),t._v(" "),_("td",[t._v("匹配所有非字母数字, 即符号, 等同于: "),_("code",[t._v("[^\\w]")])])]),t._v(" "),_("tr",[_("td",[t._v("\\d")]),t._v(" "),_("td",[t._v("匹配数字: "),_("code",[t._v("[0-9]")])])]),t._v(" "),_("tr",[_("td",[t._v("\\D")]),t._v(" "),_("td",[t._v("匹配非数字: "),_("code",[t._v("[^\\d]")])])]),t._v(" "),_("tr",[_("td",[t._v("\\s")]),t._v(" "),_("td",[t._v("匹配所有空格字符, 等同于: "),_("code",[t._v("[\\t\\n\\f\\r\\p{Z}]")])])]),t._v(" "),_("tr",[_("td",[t._v("\\S")]),t._v(" "),_("td",[t._v("匹配所有非空格字符: "),_("code",[t._v("[^\\s]")])])])])]),t._v(" "),_("h3",{attrs:{id:"贪婪匹配与惰性匹配-greedy-vs-lazy-matching"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#贪婪匹配与惰性匹配-greedy-vs-lazy-matching","aria-hidden":"true"}},[t._v("#")]),t._v(" 贪婪匹配与惰性匹配 (Greedy vs lazy matching)")]),t._v(" "),_("p",[t._v("正则表达式默认采用贪婪匹配模式，在该模式下意味着会匹配尽可能长的子串。我们可以使用 "),_("code",[t._v("?")]),t._v(" 将贪婪匹配模式转化为惰性匹配模式。")]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/(.*at)/"')]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" The fat cat sat on the mat"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" \n")])])]),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/(.*at)/"')]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" The fat cat sat on the mat"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" \n")])])])])},[],!1,null,null,null);v.default=r.exports}}]);